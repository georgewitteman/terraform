name: Terraform

"on":
  pull_request:
  push: { branches: [main] }

permissions:
  # This is required for requesting the JWT for OIDC
  id-token: write
  # Required for actions/checkout
  contents: read
  # Required to leave a comment on a pull request
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency: tf_state_lock
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDC
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -diff -recursive

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          TAILSCALE_API_KEY: ${{ secrets.TAILSCALE_API_KEY }}
          TAILSCALE_TAILNET: ${{ secrets.TAILSCALE_TAILNET }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
        env:
          TAILSCALE_API_KEY: ${{ secrets.TAILSCALE_API_KEY }}
          TAILSCALE_TAILNET: ${{ secrets.TAILSCALE_TAILNET }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `**Terraform Format and Styleüñå** \`${{ steps.fmt.outcome }}\`
            **Terraform Initialization ‚öôÔ∏è\** \`${{ steps.init.outcome }}\`
            **Terraform Plan üìñ** \`${{ steps.plan.outcome }}\`
            **Terraform Validation ü§ñ** \`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`hcl
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TAILSCALE_API_KEY: ${{ secrets.TAILSCALE_API_KEY }}
          TAILSCALE_TAILNET: ${{ secrets.TAILSCALE_TAILNET }}

  tflint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDC
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - uses: actions/cache@v3
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}

      - run: terraform init -input=false

      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint
        with:
          github_token: ${{ github.token }}

      - run: tflint --init

      # setup-tflint supports Problem Matchers for --format compact. You can see
      # annotations in pull requests when TFLint prints issues with the compact
      # format.
      - run: tflint --format compact --module

      - run: |
          for module in ./modules/*; do
            tflint --format compact --module "$module"
          done
